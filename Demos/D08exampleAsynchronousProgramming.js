// Пример 1
// function solve(){

//     console.log("1");

//     setTimeout(() => console.log("2"), 1000);

//     console.log("3");

//     // резултатът ще е 1  3  2
// }




// Пример 2
// function solve(){

//     console.log("1");

//     setTimeout(() => console.log("2"), 0);

//     console.log("3");

//     // резултатът отново ще е 1  3  2 нищо че сме задали 0 милисекунди за изчакване
// }


// Пример 3
function solve(){


    setTimeout(() => console.log("HERE"), 50);


    for (let i = 0; i < 100000; i++) {
        
        console.log(i);
        
    }

    console.log("AFTER LOOP")


    // Тук ще се изпринтят първо всички числа от for цикъла и едва след това ще се принтне HERE нищо че for цикъла отнема 
    // повече от 50 милисекунди както е зададено да се изчака за принтването на HERE. 
    // Дори AFTER LOOP ще се принтне преди HERE нищо че 50-те милисекунди са изтекли още докато се върти цикъла.
    // Ще се изпълни всичко до долу и след това JS ще се върне към асинхронния код.
    
}

solve();