// Първи случай (с let):
// let има блоков обхват (block scope).
// При всяка итерация на for, index се създава като нова променлива в блока на цикъла.
// Затова всяка анонимна функция (в setTimeout) запазва правилната стойност на index в момента на създаването ѝ.


for (let index = 0; index <= 5; index++) {
    setTimeout(function () {
        console.log(index)
    }, index * 1000);

}


// Втори случай (с var):
// var има функционален обхват (function scope) и не създава нова променлива при всяка итерация.
// Вместо това, съществува една и съща променлива index, която се презаписва при всяка итерация.
// Когато setTimeout се изпълнява, цикълът вече е приключил и index е станала 6.


for (var index = 0; index <= 5; index++) {
    setTimeout(function () {
        console.log(index)
    }, index * 1000);

}

// Това поведение във втория случай се получава тъй като var хойства и се качва най-отгоре и 
// започва да съществува извън обсега на for цикъла. 
